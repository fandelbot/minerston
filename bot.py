import logging
import sqlite3
import time
import uuid
import random
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters, Updater

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = "7349143840:AAGVNAySKjbcrlKBUru1AtOufcXw4eHIddU"
COLD_WALLET_ADDRESS = "UQC-ZLaJ2nwdPfo9AXsiEmcgUC7H1HZTW6Ak5IB03SGIbcJr"
CHANNELS = {
    "@fazixcheck": "–ß–µ–∫–∏ FAZIX / xRocket"
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
c.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0.0,
    mining_balance REAL DEFAULT 0.0,
    mining_rate REAL DEFAULT 0.0000003000,
    last_collect_time INTEGER DEFAULT 0,
    payment_comment TEXT
)
''')
conn.commit()

def ensure_columns():
    c.execute("PRAGMA table_info(users)")
    columns = [info[1] for info in c.fetchall()]

    if "last_collect_time" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN last_collect_time INTEGER DEFAULT 0")

    if "mining_balance" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN mining_balance REAL DEFAULT 0.0")

    if "mining_rate" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN mining_rate REAL DEFAULT 0.0000003000")

    if "payment_comment" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN payment_comment TEXT")

    if "referrer_id" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN referrer_id INTEGER DEFAULT NULL")

    if "referral_count" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN referral_count INTEGER DEFAULT 0")

    if "second_level_referral_count" not in columns:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        c.execute("ALTER TABLE users ADD COLUMN second_level_referral_count INTEGER DEFAULT 0")
    
    if "username" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN username TEXT")

    if "mining_timer" not in columns:
        mining_timer_default = 12 * 3600  # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        c.execute(f"ALTER TABLE users ADD COLUMN mining_timer INTEGER DEFAULT {mining_timer_default}")

ensure_columns()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
conn_withdrawals = sqlite3.connect('withdrawals.db', check_same_thread=False)
c_withdrawals = conn_withdrawals.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–≤–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
c_withdrawals.execute('''
CREATE TABLE IF NOT EXISTS withdrawals (
    user_id INTEGER,
    ton_address TEXT,
    amount REAL
)
''')
conn_withdrawals.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id, channel, context) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel}: {e}")
        return False

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
conn_admins = sqlite3.connect('administration.db', check_same_thread=False)
c_admins = conn_admins.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
c_admins.execute('''
CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY
)
''')
conn_admins.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
async def check_all_subscriptions(user_id, context) -> list:
    return [await is_subscribed(user_id, channel, context) for channel in CHANNELS]

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def subscription_required(handler):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user if update.message else update.callback_query.from_user
        if all(await check_all_subscriptions(user.id, context)):
            return await handler(update, context)
        else:
            buttons = [[InlineKeyboardButton(text=name, url=f"https://t.me/{channel[1:]}")] for channel, name in CHANNELS.items()]
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(
                "‚ùå <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
                reply_markup=reply_markup, parse_mode='HTML'
            )
    return wrapper

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(handler):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        c_admins.execute('SELECT * FROM admins WHERE user_id = ?', (user_id,))
        admin = c_admins.fetchone()
        if admin:
            return await handler(update, context)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return wrapper

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    args = context.args
    referrer_id = None

    if args:
        try:
            referrer_id = int(args[0])
        except ValueError:
            logging.warning(f"Invalid referrer ID: {args[0]}")

    c.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))
    user_data = c.fetchone()

    if not user_data:
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
        payment_comment = str(uuid.uuid4())
        c.execute('INSERT INTO users (user_id, username, mining_rate, last_collect_time, payment_comment, referrer_id) VALUES (?, ?, ?, ?, ?, ?)', 
                  (user.id, user.username, 0.0000003000, int(time.time()), payment_comment, referrer_id))
        conn.commit()

        if referrer_id:
            reward_referrer(referrer_id)
            c.execute('SELECT referrer_id FROM users WHERE user_id = ?', (referrer_id,))
            second_level_referrer_id = c.fetchone()[0]
            if second_level_referrer_id:
                reward_second_level_referrer(second_level_referrer_id)

        subscriptions = await check_all_subscriptions(user.id, context)
        if all(subscriptions):
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\n ‚õè –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –º–∞–π–Ω–∏—Ç—å TON.\n\n ‚Ü≥ –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.\n",
            )
        else:
            buttons = [[InlineKeyboardButton(text=name, url=f"https://t.me/{channel[1:]}")] for channel, name in CHANNELS.items()]
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–∞—Ç—å /start –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
            )
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.id}")
        await update.message.reply_text(
            f"‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n ‚Ü≥ –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@subscription_required
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("‚õè –ú–∞–π–Ω–∏–Ω–≥", callback_data='mining')],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance')],
        [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data='tasks')],
        [InlineKeyboardButton("üë§ –î—Ä—É–∑—å—è", callback_data='referrals')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üìÉ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f'‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@subscription_required
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'mining':
        await update_mining_message(query, context, user_id)

    elif query.data == 'start_mining':
        await start_mining(update, context)

    if query.data == 'collect':
        logging.info(f"Collect button pressed by user_id: {user_id}")
        c.execute('SELECT mining_rate, balance, mining_balance, last_collect_time FROM users WHERE user_id = ?', (user_id,))
        user_data = c.fetchone()
        if user_data:
            logging.info(f"User data found: {user_data}")
            elapsed_time = min(12 * 3600, int(time.time()) - user_data[3])
            collected_amount = user_data[2] + user_data[0] * (elapsed_time // 10)
            new_balance = user_data[1] + collected_amount
            c.execute('UPDATE users SET balance = ?, mining_balance = 0.0, last_collect_time = ? WHERE user_id = ?', 
                      (new_balance, int(time.time()), user_id))
            conn.commit()
            logging.info(f"Updated balance for user_id {user_id}: {new_balance}")
            text = (
                f"‚úÖ <b>–í—ã —Å–æ–±—Ä–∞–ª–∏ {collected_amount:.10f} TON.\n\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.10f} TON.</b>"
            )
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            logging.error(f"No user data found for user_id: {user_id}")
            await query.edit_message_text(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–∞–π–Ω–∏–Ω–≥–∞.")

    elif query.data == 'menu':
        await show_menu(query, context)

    if query.data == 'balance':
        c.execute('SELECT balance, username FROM users WHERE user_id = ?', (user_id,))
        balance, username = c.fetchone()
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"‚Ü≥ üÜî –í–∞—à ID: {user_id}\n"
            f"‚Ü≥ üîó –í–∞—à username: @{username}\n"
            f"‚Ü≥ üí∞ –í–∞—à –ë–∞–ª–∞–Ω—Å: {balance:.10f} TON.</b>"
        )
        keyboard = [
            [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data='withdraw')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif query.data == 'tasks':
        task = get_random_task(user_id)
        if task:
            task_text = (
                f"#Ô∏è‚É£ <b> –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']} </b>\n\n"
                f'üìã <b>–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n'
                f"<i>1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–ü–µ—Ä–µ–π—Ç–∏\"\n"
                f"2. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å 5-10 –ø–æ—Å—Ç–æ–≤\n"
                f"3. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\" –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.</i>\n\n"
                f"üíé <b>–ó–∞–¥–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ 0.0000001000 </b> TON"
            )
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=task['link'])],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f'check_task:{task["id"]}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=task_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="‚úÖ <b>–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è!</b>", reply_markup=reply_markup, parse_mode='HTML')

    elif query.data.startswith('check_task:'):
        await check_task_completion(update, context)

    elif query.data == 'referrals':
        c.execute('SELECT referral_count, second_level_referral_count FROM users WHERE user_id = ?', (user_id,))
        referral_count, second_level_referral_count = c.fetchone()

        referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
        text = (
            f"ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> {referral_link}\n\n"
            f"üì• <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ 0.005 TON –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥—Ä—É–∑–µ–π: {referral_count} </b>\n\n"
        )
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif query.data == 'info':
        text = (
        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –≤—ã–ø–ª–∞—Ç–∞—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏ —Ç.–¥. –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ\n\n"
        f"¬© –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: @minerston_official</b>\n\n"
        )
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif query.data == 'menu':
        await show_menu(query, context)

    elif query.data == 'upgrade_first':
        text = (
            f"üöÄ <b>–£–ª—É—á—à–µ–Ω–∏—è\n\n"
            f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: 0.5 TON\n\n"
            f"‚õè –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ 0.0000030000 TON\n\n"
            f"‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 10 TON.\n\n"
            f"‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: 0.0000600000 TON.</b>"
        )
        keyboard = (
            [InlineKeyboardButton("üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data='upgrade_second')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif query.data == "upgrade_second":
        await handle_upgrade(update, context, user_id)

    elif query.data == 'payment_done':
        await payment_done(update, context)

    elif query.data == 'withdraw':
        c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    balance = c.fetchone()[0]
    if balance < 0.5000000000:
        text = "‚ùå <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.5 TON.</b>"
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='balance')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        text = "üí≥ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à TON –∞–¥—Ä–µ—Å"
        context.user_data['awaiting_ton_address'] = True
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='balance')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    message_text = update.message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ TON –∞–¥—Ä–µ—Å–∞
    if context.user_data.get('awaiting_ton_address'):
        ton_address = message_text
        
        if is_valid_ton_address(ton_address):
            c_withdrawals.execute('INSERT INTO withdrawals (user_id, ton_address) VALUES (?, ?)', (user_id, ton_address))
            conn_withdrawals.commit()
            context.user_data['awaiting_ton_address'] = False
            context.user_data['awaiting_withdraw_amount'] = True

            text = "üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞"
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='balance')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à TON –∞–¥—Ä–µ—Å:")
            
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
    elif context.user_data.get('awaiting_withdraw_amount'):
        try:
            amount = float(message_text)
            c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
            balance = c.fetchone()[0]

            if amount > balance:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            else:
                c_withdrawals.execute('UPDATE withdrawals SET amount = ? WHERE user_id = ? AND amount IS NULL', (amount, user_id))
                c.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
                conn_withdrawals.commit()
                conn.commit()
                context.user_data['awaiting_withdraw_amount'] = False
                await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.\n\n ‚Ü≥ –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
                await update.message.reply_text(
                    "üìÉ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã", 
                    reply_markup=show_menu
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–π–Ω–∏–Ω–≥–µ
async def update_mining_message(query, context, user_id):
    c.execute('SELECT mining_rate, mining_balance, last_collect_time, mining_timer FROM users WHERE user_id = ?', (user_id,))
    user_data = c.fetchone()
    if user_data:
        elapsed_time = int(time.time()) - user_data[2]
        remaining_time = user_data[3] - elapsed_time

        if remaining_time <= 0:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            total_collected = user_data[1] + user_data[0] * (user_data[3] // 10)
            c.execute('UPDATE users SET mining_timer = 0, mining_balance = ?, last_collect_time = ? WHERE user_id = ?', 
                      (total_collected, int(time.time()), user_id))
            conn.commit()
            text = (
                f"‚ùå <b>–ú–∞–π–Ω–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞–ø—É—Å—Ç–∏—Ç—å\" –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.</b>\n\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å: {total_collected:.10f} TON</b>\n\n"
                f"‚è≥ <b>–í—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞–µ—Ç–µ - {user_data[0]:.10f} TON</b>\n"
            )
            keyboard = [
                [InlineKeyboardButton("‚ôªÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='start_mining')],
                [InlineKeyboardButton(f"üì• –°–æ–±—Ä–∞—Ç—å {total_collected:.10f} TON", callback_data='collect')],
                [InlineKeyboardButton("üöÄ –£–ª—É—á—à–µ–Ω–∏—è", callback_data='upgrade_first')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
            ]
        else:
            hours, remainder = divmod(remaining_time, 3600)
            minutes, seconds = divmod(remainder, 60)
            time_string = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            text = (
                f"‚úÖ <b>–ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.</b>\n\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å: {user_data[1] + user_data[0] * (elapsed_time // 10):.10f} TON</b>\n\n"
                f"‚è≥ <b>–í—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞–µ—Ç–µ - {user_data[0]:.10f} TON</b>\n\n"
                f"‚è∞ <b>–í—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞: {time_string} </b>"
            )
            keyboard = [
                [InlineKeyboardButton(f"üì• –°–æ–±—Ä–∞—Ç—å {user_data[1] + user_data[0] * (elapsed_time // 10):.10f} TON", callback_data='collect')],
                [InlineKeyboardButton("üöÄ –£–ª—É—á—à–µ–Ω–∏—è", callback_data='upgrade_first')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
async def mining(context):
    job = context.job
    user_id = int(job.name)
    c.execute('SELECT mining_rate, mining_balance, last_collect_time, mining_timer FROM users WHERE user_id = ?', (user_id,))
    user_data = c.fetchone()
    if user_data:
        elapsed_time = int(time.time()) - user_data[2]
        remaining_time = user_data[3] - elapsed_time
        if remaining_time <= 0:
            context.job_queue.get_jobs_by_name(str(user_id))[0].schedule_removal()
            total_collected = user_data[1] + user_data[0] * (user_data[3] // 10)
            c.execute('UPDATE users SET mining_balance = ?, mining_timer = 0, last_collect_time = ? WHERE user_id = ?', 
                      (total_collected, int(time.time()), user_id))
            conn.commit()
        else:
            new_mining_balance = user_data[1] + user_data[0] * (elapsed_time // 10)
            c.execute('UPDATE users SET mining_balance = ?, last_collect_time = ? WHERE user_id = ?', 
                      (new_mining_balance, int(time.time()), user_id))
            conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞
async def handle_upgrade(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    query = update.callback_query
    c.execute('SELECT payment_comment FROM users WHERE user_id = ?', (user_id,))
    payment_comment = c.fetchone()[0]
    text = (
        f"üíé <b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 0.5 TON.\n\n"
        f"üí≥ –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON:</b> <code>{COLD_WALLET_ADDRESS}</code>\n\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <code>{payment_comment}</code>\n\n"
        f"‚ùó <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É, –∏–Ω–∞—á–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –¥–æ–π–¥—É—Ç! –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è!‚ùó\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\"!</b>\n\n"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='payment_done')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async def payment_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    c.execute('SELECT payment_comment FROM users WHERE user_id = ?', (user_id,))
    payment_comment = c.fetchone()[0]

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        f"‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n\n"
        f"üöÄ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b>",
        reply_markup=reply_markup, parse_mode='HTML'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_menu(query, context):
    keyboard = [
        [InlineKeyboardButton("‚õè –ú–∞–π–Ω–∏–Ω–≥", callback_data='mining')],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance')],
        [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data='tasks')],
        [InlineKeyboardButton("üë§ –î—Ä—É–∑—å—è", callback_data='referrals')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=
        f"üìÉ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f'‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', reply_markup=reply_markup)

#–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞
@admin_required
async def update_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /update_rate <user_id>")
        return
    user_id = context.args[0]
    increment = 0.0000030000
    
    #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –∞–¥–º–∏–Ω—É
    c.execute('SELECT mining_rate FROM users WHERE user_id = ?', (user_id,))
    current_rate = c.fetchone()
    
    if current_rate is None:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_rate = current_rate[0] + increment
    c.execute('UPDATE users SET mining_rate = ? WHERE user_id = ?', (new_rate, user_id))
    conn.commit()
    await update.message.reply_text(f"–°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {increment:.10f} TON –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_rate:.10f} TON.")
    
# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
TASKS_LIST = [
    {"id": 1, "channel_link": "@fazixcheck", "link": "https://t.me/fazixcheck"},
    {"id": 3, "channel_link": "@topchecks_rocket", "link": "https://t.me/+FRm_FF6KASsxMGJi"}
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
USER_TASKS = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ TASKS_LIST
def get_random_task(user_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    c.execute('SELECT task_id FROM user_tasks WHERE user_id = ?', (user_id,))
    completed_tasks = set(row[0] for row in c.fetchall())
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    available_tasks = [task for task in TASKS_LIST if task["id"] not in completed_tasks]
    
    if available_tasks:
        return random.choice(available_tasks)
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@subscription_required
async def check_task_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    task_id = int(query.data.split(":")[1])
    user_id = query.from_user.id

    # –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ ID
    task = next((task for task in TASKS_LIST if task["id"] == task_id), None)
    if not task:
        await query.edit_message_text(text="‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if await is_subscribed(user_id, task["channel_link"], context):
        mining_rate_increase = 0.0000001000
        c.execute('UPDATE users SET mining_rate = mining_rate + ? WHERE user_id = ?', (mining_rate_increase, user_id))
        c.execute('INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)', (user_id, task_id))  # –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        conn.commit()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n üöÄ –í–∞—à–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {mining_rate_increase:.10f} TON –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. </b>",
            reply_markup=reply_markup, parse_mode='HTML'
        )
    else:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. </b>",
            reply_markup=reply_markup, parse_mode='HTML'
        )
      
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
c.execute('''
CREATE TABLE IF NOT EXISTS user_tasks (
    user_id INTEGER,
    task_id INTEGER,
    PRIMARY KEY (user_id, task_id)
)
''')
conn.commit()

# –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
def reward_referrer(referrer_id):
    reward_amount = 0.0050000000
    c.execute('UPDATE users SET balance = balance + ?, referral_count = referral_count + 1 WHERE user_id = ?', 
              (reward_amount, referrer_id))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è —Å—á–µ—Ç–∞ 2 —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
def reward_second_level_referrer(second_level_referrer_id):
    reward_amount = 0.0000000000  # –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    c.execute('UPDATE users SET balance = balance + ?, second_level_referral_count = second_level_referral_count + 1 WHERE user_id = ?', 
              (reward_amount, second_level_referrer_id))
    conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def active_users_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    last_24_hours = int(time.time()) - 24 * 3600
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–∏—Ä–∞–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    c.execute('SELECT COUNT(*) FROM users WHERE last_collect_time > ?', (last_24_hours,))
    active_users_count = c.fetchone()[0]
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" \
           f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {active_users_count}"
    
    await update.message.reply_text(text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
@subscription_required
async def start_mining(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    c.execute('UPDATE users SET last_collect_time = ?, mining_timer = ? WHERE user_id = ?', (int(time.time()), 12 * 3600, user_id))
    conn.commit()

    await update_mining_message(query, context, user_id)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ TON –∞–¥—Ä–µ—Å
def is_valid_ton_address(address: str) -> bool:
    return re.match(r"^[A-Za-z0-9_-]{48,64}$", address) is not None

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("update_rate", update_rate))   
    application.add_handler(CommandHandler("active_users", admin_required(active_users_stats)))                  
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.run_polling()
    updater = Updater("7349143840:AAGVNAySKjbcrlKBUru1AtOufcXw4eHIddU")
    dp = updater.dispatcher

    dp.add_handler(CallbackQueryHandler(button))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
